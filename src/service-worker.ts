/// <reference types="@sveltejs/kit" />
/// <reference lib="webworker" />

import { build, files, version } from '$service-worker';

const worker = (self as unknown) as ServiceWorkerGlobalScope;
const FILES = `cache${version}`;

// `build` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const to_cache = build.concat(files);
const staticAssets = new Set(to_cache);

worker.addEventListener('install', (event) => {
    event.waitUntil(
        caches
            .open(FILES)
            .then((cache) => cache.addAll(to_cache))
            .then(() => {
                worker.skipWaiting();
            })
    );
});

worker.addEventListener('activate', (event) => {
    event.waitUntil(
        caches.keys().then(async (keys) => {
            // delete old caches
            for (const key of keys) {
                if (key !== FILES) await caches.delete(key);
            }

            worker.clients.claim();
        })
    );
});

/**
 * Fetch the asset from the network and store it in the cache.
 * Fall back to the cache if the user is offline.
 */
async function fetchAndCache(request: Request) {
    const cache = await caches.open(`offline${version}`);

    try {
        const response = await fetch(request);
        cache.put(request, response.clone());
        return response;
    } catch (err) {
        const response = await cache.match(request);
        if (response) return response;

        throw err;
    }
}

// worker.addEventListener('fetch', (event) => {
//     if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

//     const url = new URL(event.request.url);

//     // don't try to handle e.g. data: URIs
//     const isHttp = url.protocol.startsWith('http');
//     const isDevServerRequest =
//         url.hostname === self.location.hostname && url.port !== self.location.port;
//     const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
//     const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

//     if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
//         event.respondWith(
//             (async () => {
//                 // always serve static files and bundler-generated assets from cache.
//                 // if your application has other URLs with data that will never change,
//                 // set this variable to true for them and they will only be fetched once.
//                 const cachedAsset = isStaticAsset && (await caches.match(event.request));

//                 return cachedAsset || fetchAndCache(event.request);
//             })()
//         );
//     }
// });

let blob: Blob | null = null

function dataUrItoBlob(dataUri: string) {
    let binary = worker.atob(dataUri.split(',')[1]);
    var array: number[] = [];
    for (var i = 0; i < binary.length; i++) {
        array.push(binary.charCodeAt(i));
    }
    return new Blob([new Uint8Array(array)], { type: "application/pdf" });
};


worker.addEventListener("fetch", async (e) => {
    e.respondWith(
        (async () => {
            if (e.request.url.endsWith(".pdf")) {

                if (!blob) return fetch(e.request)

                const pdf = await blob.arrayBuffer()
                const name = e.request.url.split("/").at(-1) || "download.pdf"
                return new Response(pdf, {
                    headers: {
                        "Content-Type": "application/pdf",
                        "Content-Disposition": `attachment; filename="${decodeURI(name)}"`
                    },

                })
            }



            return fetch(e.request)

        })()
    )
})


worker.addEventListener("message", async e => {
    blob = null
    const message: { cmd: string, data: any } = JSON.parse(e.data)
    if (message.cmd === "download-pdf") {
        blob = dataUrItoBlob(message.data)
        e.source?.postMessage("pdf-ready")
    }
})